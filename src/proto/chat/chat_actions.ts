// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies,keep_enum_prefix
// @generated from protobuf file "chat/chat_actions.proto" (package "com.pager.api", syntax proto3)
// tslint:disable
import { Empty } from "../common/common";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.pager.api.Chat
 */
export interface Chat {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // идентификатор чата
    /**
     * @generated from protobuf field: com.pager.api.ChatType type = 2;
     */
    type: ChatType; // тип чата
    /**
     * @generated from protobuf field: optional com.pager.api.ChatMetadata metadata = 3;
     */
    metadata?: ChatMetadata; // дополнительная информация
    /**
     * @generated from protobuf field: repeated com.pager.api.ChatMessage messages = 4;
     */
    messages: ChatMessage[]; // сообщения в чате
    /**
     * @generated from protobuf field: repeated string members_id = 5;
     */
    membersId: string[]; // идентификаторы участников
}
/**
 * @generated from protobuf message com.pager.api.ChatMetadata
 */
export interface ChatMetadata {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string; // название группового чата
    /**
     * @generated from protobuf field: optional string avatar_url = 2;
     */
    avatarUrl?: string; // обложка для группового чата
}
/**
 * @generated from protobuf message com.pager.api.ChatMessage
 */
export interface ChatMessage {
    /**
     * @generated from protobuf field: optional string text = 1;
     */
    text?: string; // текст сообщения
    /**
     * @generated from protobuf field: int64 stamp_millis = 2;
     */
    stampMillis: bigint; // время отправки сообщения
    /**
     * @generated from protobuf field: com.pager.api.ChatMessage.MessageStatus status = 3;
     */
    status: ChatMessage_MessageStatus; // статус сообщения
    /**
     * @generated from protobuf field: string author_id = 4;
     */
    authorId: string; // автор сообщения
    /**
     * @generated from protobuf field: string linked_chat_id = 5;
     */
    linkedChatId: string; // связанный чат
}
/**
 * статус сообщения
 *
 * @generated from protobuf enum com.pager.api.ChatMessage.MessageStatus
 */
export enum ChatMessage_MessageStatus {
    /**
     * @generated from protobuf enum value: uploading = 0;
     */
    uploading = 0,
    /**
     * @generated from protobuf enum value: sent = 1;
     */
    sent = 1,
    /**
     * @generated from protobuf enum value: seen = 2;
     */
    seen = 2,
    /**
     * @generated from protobuf enum value: error = 3;
     */
    error = 3,
    /**
     * @generated from protobuf enum value: deleted = 4;
     */
    deleted = 4
}
/**
 * @generated from protobuf message com.pager.api.CreateChatRequest
 */
export interface CreateChatRequest {
    /**
     * @generated from protobuf field: com.pager.api.ChatType type = 1;
     */
    type: ChatType; // тип чата
    /**
     * @generated from protobuf field: optional com.pager.api.ChatMetadata metadata = 2;
     */
    metadata?: ChatMetadata; // дополнительная информация
    /**
     * @generated from protobuf field: repeated string members_id = 3;
     */
    membersId: string[]; // идентификаторы участников
}
/**
 * @generated from protobuf enum com.pager.api.ChatType
 */
export enum ChatType {
    /**
     * @generated from protobuf enum value: group = 0;
     */
    group = 0,
    /**
     * @generated from protobuf enum value: personal = 1;
     */
    personal = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Chat$Type extends MessageType<Chat> {
    constructor() {
        super("com.pager.api.Chat", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["com.pager.api.ChatType", ChatType] },
            { no: 3, name: "metadata", kind: "message", T: () => ChatMetadata },
            { no: 4, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessage },
            { no: 5, name: "members_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Chat>): Chat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.type = 0;
        message.messages = [];
        message.membersId = [];
        if (value !== undefined)
            reflectionMergePartial<Chat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Chat): Chat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* com.pager.api.ChatType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional com.pager.api.ChatMetadata metadata */ 3:
                    message.metadata = ChatMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* repeated com.pager.api.ChatMessage messages */ 4:
                    message.messages.push(ChatMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string members_id */ 5:
                    message.membersId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Chat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* com.pager.api.ChatType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* optional com.pager.api.ChatMetadata metadata = 3; */
        if (message.metadata)
            ChatMetadata.internalBinaryWrite(message.metadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.pager.api.ChatMessage messages = 4; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessage.internalBinaryWrite(message.messages[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string members_id = 5; */
        for (let i = 0; i < message.membersId.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.membersId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.pager.api.Chat
 */
export const Chat = new Chat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMetadata$Type extends MessageType<ChatMetadata> {
    constructor() {
        super("com.pager.api.ChatMetadata", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMetadata>): ChatMetadata {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<ChatMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMetadata): ChatMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* optional string avatar_url */ 2:
                    message.avatarUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* optional string avatar_url = 2; */
        if (message.avatarUrl !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.avatarUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.pager.api.ChatMetadata
 */
export const ChatMetadata = new ChatMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessage$Type extends MessageType<ChatMessage> {
    constructor() {
        super("com.pager.api.ChatMessage", [
            { no: 1, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "stamp_millis", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["com.pager.api.ChatMessage.MessageStatus", ChatMessage_MessageStatus] },
            { no: 4, name: "author_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "linked_chat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMessage>): ChatMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stampMillis = 0n;
        message.status = 0;
        message.authorId = "";
        message.linkedChatId = "";
        if (value !== undefined)
            reflectionMergePartial<ChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessage): ChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string text */ 1:
                    message.text = reader.string();
                    break;
                case /* int64 stamp_millis */ 2:
                    message.stampMillis = reader.int64().toBigInt();
                    break;
                case /* com.pager.api.ChatMessage.MessageStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* string author_id */ 4:
                    message.authorId = reader.string();
                    break;
                case /* string linked_chat_id */ 5:
                    message.linkedChatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string text = 1; */
        if (message.text !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* int64 stamp_millis = 2; */
        if (message.stampMillis !== 0n)
            writer.tag(2, WireType.Varint).int64(message.stampMillis);
        /* com.pager.api.ChatMessage.MessageStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* string author_id = 4; */
        if (message.authorId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.authorId);
        /* string linked_chat_id = 5; */
        if (message.linkedChatId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.linkedChatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.pager.api.ChatMessage
 */
export const ChatMessage = new ChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateChatRequest$Type extends MessageType<CreateChatRequest> {
    constructor() {
        super("com.pager.api.CreateChatRequest", [
            { no: 1, name: "type", kind: "enum", T: () => ["com.pager.api.ChatType", ChatType] },
            { no: 2, name: "metadata", kind: "message", T: () => ChatMetadata },
            { no: 3, name: "members_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateChatRequest>): CreateChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.membersId = [];
        if (value !== undefined)
            reflectionMergePartial<CreateChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateChatRequest): CreateChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.pager.api.ChatType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional com.pager.api.ChatMetadata metadata */ 2:
                    message.metadata = ChatMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* repeated string members_id */ 3:
                    message.membersId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.pager.api.ChatType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional com.pager.api.ChatMetadata metadata = 2; */
        if (message.metadata)
            ChatMetadata.internalBinaryWrite(message.metadata, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string members_id = 3; */
        for (let i = 0; i < message.membersId.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.membersId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.pager.api.CreateChatRequest
 */
export const CreateChatRequest = new CreateChatRequest$Type();
/**
 * @generated ServiceType for protobuf service com.pager.api.ChatActions
 */
export const ChatActions = new ServiceType("com.pager.api.ChatActions", [
    { name: "CreateChat", options: {}, I: CreateChatRequest, O: Chat },
    { name: "SendMessage", options: {}, I: ChatMessage, O: Empty }
]);
