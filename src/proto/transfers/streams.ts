// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies
// @generated from protobuf file "transfers/streams.proto" (package "com.pager.api", syntax proto3)
// tslint:disable
import { TransferObject } from "./item";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.pager.api.ProfileStreamRequest
 */
export interface ProfileStreamRequest {
}
/**
 * @generated from protobuf enum com.pager.api.ProfileStreamRequest.Type
 */
export enum ProfileStreamRequest_Type {
    /**
     * @generated from protobuf enum value: none = 0;
     */
    none = 0,
    /**
     * информация о профиле
     *
     * @generated from protobuf enum value: profile_info = 1;
     */
    profile_info = 1,
    /**
     * данные чатах
     *
     * @generated from protobuf enum value: chats = 2;
     */
    chats = 2
}
/**
 * @generated from protobuf message com.pager.api.ChatStreamRequest
 */
export interface ChatStreamRequest {
    /**
     * @generated from protobuf field: string chat_id = 1;
     */
    chatId: string; // идентификатор чата
}
/**
 * @generated from protobuf enum com.pager.api.ChatStreamRequest.Type
 */
export enum ChatStreamRequest_Type {
    /**
     * @generated from protobuf enum value: none = 0;
     */
    none = 0,
    /**
     * сообщения в чате
     *
     * @generated from protobuf enum value: messages = 1;
     */
    messages = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class ProfileStreamRequest$Type extends MessageType<ProfileStreamRequest> {
    constructor() {
        super("com.pager.api.ProfileStreamRequest", []);
    }
    create(value?: PartialMessage<ProfileStreamRequest>): ProfileStreamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProfileStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProfileStreamRequest): ProfileStreamRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ProfileStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.pager.api.ProfileStreamRequest
 */
export const ProfileStreamRequest = new ProfileStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatStreamRequest$Type extends MessageType<ChatStreamRequest> {
    constructor() {
        super("com.pager.api.ChatStreamRequest", [
            { no: 1, name: "chat_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatStreamRequest>): ChatStreamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<ChatStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatStreamRequest): ChatStreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chat_id */ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chat_id = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.pager.api.ChatStreamRequest
 */
export const ChatStreamRequest = new ChatStreamRequest$Type();
/**
 * @generated ServiceType for protobuf service com.pager.api.PagerStreams
 */
export const PagerStreams = new ServiceType("com.pager.api.PagerStreams", [
    { name: "StreamProfile", serverStreaming: true, options: {}, I: ProfileStreamRequest, O: TransferObject },
    { name: "StreamChat", serverStreaming: true, options: {}, I: ChatStreamRequest, O: TransferObject }
]);
