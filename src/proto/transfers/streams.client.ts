// @generated by protobuf-ts 2.9.3 with parameter generate_dependencies,keep_enum_prefix
// @generated from protobuf file "transfers/streams.proto" (package "com.pager.api", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PagerStreams } from "./streams";
import type { ChatStreamRequest } from "./streams";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TransferObject } from "./item";
import type { ProfileStreamRequest } from "./streams";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service com.pager.api.PagerStreams
 */
export interface IPagerStreamsClient {
    /**
     * @generated from protobuf rpc: StreamProfile(com.pager.api.ProfileStreamRequest) returns (stream com.pager.api.TransferObject);
     */
    streamProfile(input: ProfileStreamRequest, options?: RpcOptions): ServerStreamingCall<ProfileStreamRequest, TransferObject>;
    /**
     * @generated from protobuf rpc: StreamChat(com.pager.api.ChatStreamRequest) returns (stream com.pager.api.TransferObject);
     */
    streamChat(input: ChatStreamRequest, options?: RpcOptions): ServerStreamingCall<ChatStreamRequest, TransferObject>;
}
/**
 * @generated from protobuf service com.pager.api.PagerStreams
 */
export class PagerStreamsClient implements IPagerStreamsClient, ServiceInfo {
    typeName = PagerStreams.typeName;
    methods = PagerStreams.methods;
    options = PagerStreams.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamProfile(com.pager.api.ProfileStreamRequest) returns (stream com.pager.api.TransferObject);
     */
    streamProfile(input: ProfileStreamRequest, options?: RpcOptions): ServerStreamingCall<ProfileStreamRequest, TransferObject> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ProfileStreamRequest, TransferObject>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamChat(com.pager.api.ChatStreamRequest) returns (stream com.pager.api.TransferObject);
     */
    streamChat(input: ChatStreamRequest, options?: RpcOptions): ServerStreamingCall<ChatStreamRequest, TransferObject> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatStreamRequest, TransferObject>("serverStreaming", this._transport, method, opt, input);
    }
}
